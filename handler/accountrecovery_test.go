package handler_test

import (
	"aletheiaware.com/authgo"
	"aletheiaware.com/authgo/authtest"
	"aletheiaware.com/authgo/handler"
	"github.com/stretchr/testify/assert"
	"html/template"
	"io"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strings"
	"testing"
)

func TestAccountRecovery(t *testing.T) {
	tmpl, err := template.New("account-recovery.go.html").Parse(`{{.Error}}`)
	assert.Nil(t, err)
	t.Run("Redirects When Signed In", func(t *testing.T) {
		a := authtest.NewAuthenticator(t)
		authtest.NewTestAccount(t, a)
		token, _ := authtest.SignIn(t, a)
		mux := http.NewServeMux()
		handler.AttachHandlers(a, mux, tmpl)
		request := httptest.NewRequest(http.MethodGet, "/account-recovery", nil)
		request.AddCookie(authgo.NewSignInCookie(token))
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusFound, result.StatusCode)
		u, err := result.Location()
		assert.Nil(t, err)
		assert.Equal(t, "/account", u.String())
	})
	t.Run("Returns 200 When Not Signed In", func(t *testing.T) {
		a := authtest.NewAuthenticator(t)
		mux := http.NewServeMux()
		handler.AttachHandlers(a, mux, tmpl)
		request := httptest.NewRequest(http.MethodGet, "/account-recovery", nil)
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusOK, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Empty(t, string(body))
		cookies := result.Cookies()
		assert.Equal(t, 1, len(cookies))
		assert.Equal(t, authgo.SESSION_ACCOUNT_RECOVERY_COOKIE, cookies[0].Name)
	})
	t.Run("Redirects When Email Is Registered", func(t *testing.T) {
		a := authtest.NewAuthenticator(t)
		acc := authtest.NewTestAccount(t, a)
		assert.Nil(t, a.AccountManager().SetEmailVerified(acc.Email, true))
		mux := http.NewServeMux()
		handler.AttachHandlers(a, mux, tmpl)
		request := httptest.NewRequest(http.MethodGet, "/account-recovery", nil)
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusOK, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Empty(t, string(body))
		cookies := result.Cookies()
		assert.Equal(t, 1, len(cookies))
		assert.Equal(t, authgo.SESSION_ACCOUNT_RECOVERY_COOKIE, cookies[0].Name)
		reader := strings.NewReader("email=" + authtest.TEST_EMAIL)
		request = httptest.NewRequest(http.MethodPost, "/account-recovery", reader)
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		request.AddCookie(cookies[0])
		response = httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result = response.Result()
		assert.Equal(t, http.StatusFound, result.StatusCode)
		body, err = io.ReadAll(result.Body)
		assert.Nil(t, err)
		u, err := result.Location()
		assert.Nil(t, err)
		assert.Equal(t, "/account-recovery-verification", u.String())
	})
	t.Run("Redirects When Email Is Not Registered", func(t *testing.T) {
		a := authtest.NewAuthenticator(t)
		mux := http.NewServeMux()
		handler.AttachHandlers(a, mux, tmpl)
		request := httptest.NewRequest(http.MethodGet, "/account-recovery", nil)
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusOK, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Empty(t, string(body))
		cookies := result.Cookies()
		assert.Equal(t, 1, len(cookies))
		assert.Equal(t, authgo.SESSION_ACCOUNT_RECOVERY_COOKIE, cookies[0].Name)
		reader := strings.NewReader("email=" + authtest.TEST_EMAIL)
		request = httptest.NewRequest(http.MethodPost, "/account-recovery", reader)
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		request.AddCookie(cookies[0])
		response = httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result = response.Result()
		assert.Equal(t, http.StatusFound, result.StatusCode)
		u, err := result.Location()
		assert.Nil(t, err)
		assert.Equal(t, "/account-recovery", u.String())

		// Subsequent Get request should show error
		request = httptest.NewRequest(http.MethodGet, "/account-recovery", nil)
		request.AddCookie(cookies[0])
		response = httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result = response.Result()
		assert.Equal(t, http.StatusOK, result.StatusCode)
		body, err = io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Equal(t, authgo.ErrEmailNotRegistered.Error(), string(body))
	})
	t.Run("Redirects When Post Requested Before Get", func(t *testing.T) {
		a := authtest.NewAuthenticator(t)
		mux := http.NewServeMux()
		handler.AttachHandlers(a, mux, tmpl)
		reader := strings.NewReader("email=" + authtest.TEST_EMAIL)
		request := httptest.NewRequest(http.MethodPost, "/account-recovery", reader)
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusFound, result.StatusCode)
		u, err := result.Location()
		assert.Nil(t, err)
		assert.Equal(t, "/account-recovery", u.String())
	})
}

func TestAccountRecoveryVerification(t *testing.T) {
	tmpl, err := template.New("account-recovery-verification.go.html").Parse(`{{.Error}}`)
	assert.Nil(t, err)
	t.Run("Returns 200 When Recovering", func(t *testing.T) {
		a := authtest.NewAuthenticator(t)
		authtest.NewTestAccount(t, a)
		token, err := a.SessionManager().NewAccountRecovery()
		assert.Nil(t, err)
		mux := http.NewServeMux()
		handler.AttachHandlers(a, mux, tmpl)
		request := httptest.NewRequest(http.MethodGet, "/account-recovery-verification", nil)
		request.AddCookie(authgo.NewAccountRecoveryCookie(token))
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusOK, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Empty(t, string(body))
	})
	t.Run("Redirects When Not Recovering", func(t *testing.T) {
		a := authtest.NewAuthenticator(t)
		mux := http.NewServeMux()
		handler.AttachHandlers(a, mux, tmpl)
		request := httptest.NewRequest(http.MethodGet, "/account-recovery-verification", nil)
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusFound, result.StatusCode)
		u, err := result.Location()
		assert.Nil(t, err)
		assert.Equal(t, "/account-recovery", u.String())
	})
	t.Run("Redirects After Recovery", func(t *testing.T) {
		a := authtest.NewAuthenticator(t)
		authtest.NewTestAccount(t, a)
		sm := a.SessionManager()
		token, err := sm.NewAccountRecovery()
		assert.Nil(t, err)
		err = sm.SetAccountRecoveryEmail(token, authtest.TEST_EMAIL)
		assert.Nil(t, err)
		err = sm.SetAccountRecoveryUsername(token, authtest.TEST_USERNAME)
		assert.Nil(t, err)
		err = sm.SetAccountRecoveryChallenge(token, authtest.TEST_CHALLENGE)
		assert.Nil(t, err)
		mux := http.NewServeMux()
		handler.AttachHandlers(a, mux, tmpl)
		values := url.Values{}
		values.Add("verification", authtest.TEST_CHALLENGE)
		reader := strings.NewReader(values.Encode())
		request := httptest.NewRequest(http.MethodPost, "/account-recovery-verification", reader)
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		request.AddCookie(authgo.NewAccountRecoveryCookie(token))
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusFound, result.StatusCode)
		cookies := result.Cookies()
		assert.Equal(t, 1, len(cookies))
		assert.Equal(t, authgo.SESSION_SIGN_IN_COOKIE, cookies[0].Name)
		u, err := result.Location()
		assert.Nil(t, err)
		assert.Equal(t, "/account-password", u.String())
		username, authenticated, errmsg, ok := sm.LookupSignIn(cookies[0].Value)
		assert.Equal(t, authtest.TEST_USERNAME, username)
		assert.True(t, authenticated)
		assert.Empty(t, errmsg)
		assert.True(t, ok)
	})
	t.Run("Redirects When Challenge Is Incorrect", func(t *testing.T) {
		a := authtest.NewAuthenticator(t)
		sm := a.SessionManager()
		token, err := sm.NewAccountRecovery()
		assert.Nil(t, err)
		cookie := authgo.NewAccountRecoveryCookie(token)
		err = sm.SetAccountRecoveryChallenge(token, authtest.TEST_CHALLENGE)
		assert.Nil(t, err)
		mux := http.NewServeMux()
		handler.AttachHandlers(a, mux, tmpl)
		values := url.Values{}
		values.Add("verification", "1234abcd")
		reader := strings.NewReader(values.Encode())
		request := httptest.NewRequest(http.MethodPost, "/account-recovery-verification", reader)
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		request.AddCookie(cookie)
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusFound, result.StatusCode)
		u, err := result.Location()
		assert.Nil(t, err)
		assert.Equal(t, "/account-recovery-verification", u.String())

		// Subsequent Get request should show error
		request = httptest.NewRequest(http.MethodGet, "/account-recovery-verification", nil)
		request.AddCookie(cookie)
		response = httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result = response.Result()
		assert.Equal(t, http.StatusOK, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Equal(t, authgo.ErrIncorrectEmailVerification.Error(), string(body))
	})
}
